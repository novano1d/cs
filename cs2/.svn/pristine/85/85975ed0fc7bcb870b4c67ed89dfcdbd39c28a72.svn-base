#include "string.hpp"
#include <assert.h>

String::String()
{
    str[0] = 0;
}

String::String(char c)
{
    str[0] = c;
    str[1] = 0;
}

String::String(const char literal[])
{
    int i = 0;
    while (literal[i] != 0)
    {
        if (i == capacity()) break;
        str[i] = literal[i];
        i++;
    }
    str[i] = 0;
}

int String::capacity() const
{
    return STRING_SIZE - 1;
}

int String::length() const 
{
    int result = 0;
    while (str[result] != 0) 
    {
        result++;
    }
    return result;
}

char String::operator[](int i) const
{
    assert(i >= 0);
    assert(i < length());
    return str[i];
}

char& String::operator[](int i)
{
    assert(i >= 0);
    assert(i < length());
    return str[i];
}

String& String::operator+=(const String& rhs)
{
    int rhsLength = rhs.length();
    int offset = length();
    int i = 0;
    while (i < rhsLength)
    {
        if ((i + offset) >= capacity()) break;
        str[i + offset] = rhs[i];
        ++i;
    }
    str[i + offset] = 0;
    return *this;
}

String operator+(String lhs, const String& rhs)
{
    return lhs += rhs;
}

bool String::operator==(const String& rhs) const
{
    int i = 0;
    while ((str[i] != 0) && (str[i] == rhs.str[i]))
    {
        i++;
    }
    return str[i] == rhs.str[i];
}

bool String::operator<(const String& rhs) const
{
    int i = 0;
    while ((str[i] != 0) && (rhs.str[i] != 0) && (str[i] == rhs.str[i])) ++i;
    return str[i] < rhs.str[i];
}

bool operator==(char lhs, const String& rhs) {return String(lhs) == rhs;}
bool operator==(const char lhs[], const String& rhs) {return String(lhs) == rhs;}
bool operator<(char lhs, const String& rhs) {return String(lhs) < rhs;}
bool operator<(const char lhs[], const String& rhs) {return String(lhs) < rhs;}
bool operator!=(const String& lhs, const String& rhs) { return !(lhs == rhs);}
bool operator<=(const String& lhs, const String& rhs) {return !(rhs < lhs);}
bool operator>=(const String& lhs, const String& rhs) {return !(lhs < rhs);}
bool operator>(const String& lhs, const String& rhs) {return rhs < lhs;}

int String::findch(int start, char ch) const 
{
    if (start >= length()) return -1;
    if (start < 0) start = 0;
    int i = start;
    while (str[i] != 0)
    {
        if (str[i] == ch) return i;
        i++;
    }
    return -1;
}

int String::findstr(int start, const String& findThis) const
{
    int altIndex = 0;
    int out = -1;
    if (findThis.length() == 0) return out;
    for (int i = start; i < capacity(); i++)
    {
        if (str[i] == findThis.str[altIndex])
        {
            if (out == -1) out = i;
            if (findThis.str[altIndex + 1] == 0)
            {
                return out;
            }
            altIndex++;
        }
        else
        {
            altIndex = 0;
            out = -1;
        }
    }
    return out;
}

String String::substr(int start, int end) const
{
    String result;
    if (start < 0) start = 0;
    if (end >= length()) end = length() - 1;
    if (end < start) return result;
    if (start >= length()) return result;
    
    for (int i = start; i <= end; ++i)
    {
        result += str[i];
    }

    return result;
}

std::ostream& operator<<(std::ostream& out, const String& rhs)
{
    out << rhs.str;
    return out;
}

std::istream& operator>>(std::istream& in, String& rhs)
{
    char buffer[STRING_SIZE];
    if (in.eof())
        buffer[0] = 0;
    else
        in >> buffer;
    rhs = String(buffer);
    return in;
}