//
//
// File:        logentry.cpp  
//       
// Version:     1.0
// Date:        3-18-2022
// Author:      Matthew Moore
// 
// Description: Class implementation for a log entry.
//
// 

////////////////////////////////////////////////////////////
#include <iostream>
#include <vector> 
#include "string.hpp" 
#include "logentry.hpp"

////////////////////////////////////////////////////////// 
// REQUIRES: String is a line from a log file
// ENSURES:  String results in 10 splits
//
LogEntry::LogEntry(String s) 
{
    // ...
    std::vector<String> vec = s.split(' ');
    if (vec.size() != 10) return;
    host = vec[0];
    
    //date
    String day = vec[3].substr(1, vec[3].findch(1, '/') - 1);
    String month = vec[3].substr(vec[3].findch(1, '/') + 1, vec[3].findch(1, '/') + 3);
    int year = vec[3].substr(vec[3].findch(1, ':') - 4, vec[3].findch(1, ':') - 1).toInt();
    date = Date(day, month, year);

    //time
    int hour = vec[3].substr(1 + vec[3].findch(1, ':'), 2 + vec[3].findch(1, ':')).toInt();
    int minute = vec[3].substr(4 + vec[3].findch(1, ':'), 5 + vec[3].findch(1, ':')).toInt();
    int second = vec[3].substr(7 + vec[3].findch(1, ':'), 8 + vec[3].findch(1, ':')).toInt();
    time = Time(hour, minute, second);

    request = vec[5].substr(1, vec[5].length() - 1) + " " + vec[6] + " " + vec[7].substr(0, vec[7].length() - 2);

    status = vec[8];

    number_of_bytes = vec[9].toInt();
}

////////////////////////////////////////////////////////// 
// REQUIRES:  istream contains log data
// ENSURES: not end of file 
//
std::vector<LogEntry> parse(std::istream& in) {
    std::vector<LogEntry> result;
    String temp;
    char ch;
    in.get(ch);
    while(!in.eof()) 
    {
        if (ch == '\n')
        {
            result.push_back(LogEntry(temp));
            temp = "";
        }
        else
        {
            temp += ch;
        }
        in.get(ch);
    }
    return result;
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
void output_all(std::ostream& out, const std::vector<LogEntry> &input) 
{
    for (int i = 0; i < (int)input.size(); i++)
    {
        out << input[i].getHost() << " "; //host
        out << input[i].getDate().getDay() << " " << input[i].getDate().getMonth() << " " << input[i].getDate().getYear() << " "; // date
        out << input[i].getTime().getHour() << ':' << input[i].getTime().getMinute() << ':' << input[i].getTime().getSecond() << " "; //time
        out << input[i].getRequest() << " "; //request
        out << input[i].getStatus() << " "; //status
        out << input[i].getNumOfBytes() << " "; //bytes
        out << std::endl; // new line 
    }
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
void by_host(std::ostream& out, const std::vector<LogEntry> &input) 
{
    for (int i = 0; i < (int)input.size(); i++)
    {
        out << input[i].getHost(); //host
        out << std::endl; // new line 
    }
}

////////////////////////////////////////////////////////// 
// REQUIRES:  input vector is of LogEntry type
// ENSURES: number of bytes are 0 if nothing is in the vector
//
int byte_count(const std::vector<LogEntry> &input) 
{
    int bytes = 0;
    for (int i = 0; i < (int)input.size(); i++)
    {
        bytes += input[i].getNumOfBytes();
    }
    return bytes;
}

 
